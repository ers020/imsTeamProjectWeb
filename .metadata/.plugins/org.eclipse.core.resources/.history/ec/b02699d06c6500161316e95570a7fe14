package com.revature.aop;

import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;

@Aspect
public class LoggingAspect {
	
	/**
	 * Someone called insert method! LOG it.... and Kill Kenny.
	 */
	@Before("insertPointcut()")
	public void logInsert(){
		System.out.println("[LOG]: --@Before-- Insert method executed");
	}
	
	@After("getPointcut()")
	public void logAfterInsert(){	//After "finally"
		System.out.println("[LOG]: --@After-- Insert method executed");
	}
	
	@AfterReturning(pointcut="getPointcut()", returning="obj") //doesn't work if afterReturning does not fire i.e. method is stopped. 
	public void logAfterReturning(Object obj){ // obj is whatever intercepted method has returned
		System.out.println("[LOG]: --@AfterRunning-- "
				+ "Get method returned: " + obj);
	}
	
	@AfterThrowing(pointcut="getPointcut()", throwing="e")
	public void logGetException(Exception e){//used if, and only if, an error is thrown
		System.err.println("[LOG]: --@AfterThrowing-- "
				+ "Get method returned: " + e.getMessage());
	}
	
	
	
	
	
	//The order in which they display/fire can vary, do not make them dependent on one another
	/**
	 * ----------------------------------------POINTCUTS ONLY---------------------------------------------
	 */
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	@Pointcut("execution(* insert(..))") // Point expression, copy and paste specific method into the parentheses
	public void insertPointcut(){} //hook method - something that is there to attach an annotation to
	
	@Pointcut("execution(public String getString())")
	public void getPointcut(){}
	//////////////////////////////////////////////////////////////////////////////////////////////////////
}
