package com.revature.dataAccess;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import org.hibernate.Query;
import org.hibernate.Session;

import com.revature.beans.Address;
import com.revature.beans.CategoryDescription;
import com.revature.beans.Client;
import com.revature.beans.ClientType;
import com.revature.beans.Invoice;
import com.revature.beans.Order;
import com.revature.beans.Product;
import com.revature.beans.State;
import org.apache.log4j.Logger;


public class ManagementDAO {

	private Session session;
	private static Logger log = Logger.getRootLogger();
	
	
	public ManagementDAO(Session session) {
		log.info("Create Session");
		this.session = session;
	}

	public ManagementDAO()
	{
		super();
		log.info("DAO Constructor instantiated");
	}

	//made this more abstract
	///EPIC!!!!!///
	public void insertObject(Object obj)
	{
		log.info("Abstract Insert Object: Also does Update");
		//THIS SHOULD UPDATE [AND] INSERT
		Object mergedObj = session.merge(obj); 
		session.saveOrUpdate(mergedObj);
//		discrete process
//		session.save(obj);
	}
	
	
	
	//////////////////////////// BEGIN CLIENT SECTION /////////////////////////////
	
	public void deleteClient(Client obj)
	{
		log.info("Create 'Terminated' Client");
		obj.setName(obj.getName() + " [TERMINATED]");	//IDEA!!! WHEN SHOWING CLIENT LIST, DON'T SHOW IF INCLUDE [TERMINATED], 
														//BUT VIEWABLE IN HISTORY
		obj.setClientType(new ClientType(3, "Terminated"));  //DEF SHOULD NOT BE HARDCODED
															 //NEED TO FIGURE OUT HOW TO PROGRAMATICALLY SET TYPE
		Object mergedObj = session.merge(obj); 
		session.saveOrUpdate(mergedObj);
		log.info("'Terminated' Client saved into session");
		return;
	}
	
	public Set<Client> getCurrentClients(){
		
		//should use specific search here to find the "[" or "TERMINATED"
		
		return null;
		
	}
	
	public Set<Client> getAllClients(){
		log.info("Query DB for All Clients");
		String hql = "FROM Client";
		
		Query query = session.createQuery(hql);
		
		
		@SuppressWarnings("unchecked")
		Set<Client> results = new HashSet<Client>(query.list());
		log.info("Return All Clients results");
		return results;
		
	}
	
/*	public void updateClient(Client obj)
	{
		Object mergedObj = session.merge(obj); 	//   >>>  POSSIBLY UNNECESSARY  <<<
		session.saveOrUpdate(mergedObj);
	}*/
	
////////////////////////////////// END CLIENT SECTION //////////////////////////////////
	
	
	///////////////// BEGIN INVOICE SECTION //////////////////////////
	
	// Could eventually have it take a Date figure, and pull only those
	// before or after a certain Date.
	// Something fun for later.
	public Set<Invoice> getInvoices(/* possibly a parameter */)
	{
		log.info("Query DB for Invoices");
		String hql = "FROM INVOICES";
		
		Query query =  session.createQuery(hql);
		
		@SuppressWarnings("unchecked")
		Set<Invoice> results = new HashSet<Invoice>(query.list());
		log.info("Return All Invoices");
		return results;
	}
	
	///////////////// END INVOICE SECTION //////////////////////////
	
	
	//AVAILABLE IN THE INCOMING AND OUTGOING SECTION//
//	public Set<List> getProducts(/* possibly a parameter */)
//	{
//		String hql = "FROM PRODUCT";
//		
//		Query query = session.createQuery(hql);
//		
//		@SuppressWarnings("unchecked")
//		Set<List> results = (Set<List>)query.uniqueResult();
//		
//		return results;		
//	}

	/////////////////////// BEGIN INCOMING AND OUTGOING SECTION ////////////////////////
	
	//Get client type
	public Set<ClientType> getTypes() {
		log.info("Query DB for List of Client Type");
		String clientTypeQuery = "FROM com.revature.beans.ClientType";
		Query query = session.createQuery(clientTypeQuery);
		
		@SuppressWarnings("unchecked")
		Set<ClientType> type = new HashSet<ClientType>(query.list());
		log.info("Return result list of Client Type");
		return type;
	}
	
	//Get clients
	public Set<Client> getClients(int clientTypeId){
		log.info("Query DB for List of Clients based on Client Type Id");
		String clientType = "FROM com.revature.beans.Client WHERE CLIENT_TYPE = :param";
		Query query = session.createQuery(clientType);
		query.setInteger("param", clientTypeId);
	
		@SuppressWarnings("unchecked")
		Set<Client> clients = new HashSet<Client>(query.list());
		
		log.info("Return result for List of Clients based on Client Type Id");
		return clients;
	}

	//Get products
	public Set<Product> getAllProducts() {
		log.info("Query DB for List of Products");
		String productQuery = "FROM com.revature.beans.Product";
		Query query = session.createQuery(productQuery);
		
		@SuppressWarnings("unchecked")
		Set<Product> products = new HashSet<Product>(query.list());
		log.info("Result for List of Products");
		return products;
	}

	//Update stocks
	public void changeStock(int amount, int productId) {
		String productQuery = "UPDATE BEARDO_PRODUCTS set quantity =:quantity "+
				"WHERE id =:id";
		Query query = session.createQuery(productQuery);
		query.setParameter("quantity", amount);
		query.setParameter("id", productId);
		query.executeUpdate();
		
		return;
	}
	
	//Get current order after creation --> needed because the ID changes AFTER going into the database, but before being
	//stored into the DB
	public Order getCurrentOrder(Date orderDate) {
		String hql = "FROM Order WHERE date =:date";
		Query query = session.createQuery(hql);
		query.setParameter("date", orderDate);
		
		Order order = (Order) query.uniqueResult();
		return order;
	}
	///////////////////// END INCOMING AND OUTGOING SECTION //////////////////////
	
	///////////////////////// ADD NEW ITEMS/PRODUCTS ///////////////////////////////
	public Set<CategoryDescription> getCatChoice(String categoryChoice) {
		String hql = "FROM CategoryDescription WHERE description =:description";
		Query query = session.createQuery(hql);
		query.setParameter("description", categoryChoice);
		@SuppressWarnings("unchecked")
		Set<CategoryDescription> catDesc = new HashSet<CategoryDescription>(query.list());
		return catDesc;
	}

	public Product getNewProduct(String newItemName) {
		String hql = "FROM Product WHERE name =:name";
		Query query = session.createQuery(hql);
		query.setParameter("name", newItemName);
		Product product = (Product) query.uniqueResult();
		return product;
	}

	///////////////////////// END ADD NEW ITEMS/PRODUCTS ///////////////////////////////
	

	///////////////////////// ADD CLIENT SECTION ///////////////////////////////////////
	
	///These have re-useablility for later///
	public State getState(String stateName) {
		String theState = "FROM State WHERE name =:param";
		Query query = session.createQuery(theState);
		query.setParameter("param", stateName);
		State state = (State) query.uniqueResult();
		
		return state;
	}

	public Address getAddress(State state) {
		String addy = "FROM Address WHERE STATE_ID =:state";
		Query query = session.createQuery(addy);
		query.setParameter("state", state.getId());
		
		Address address = (Address) query.uniqueResult();
		
		return address;
	}

	public ClientType getClientType() {
		String hql = "FROM ClientType WHERE id =:id";
		Query query = session.createQuery(hql);
		query.setParameter("id", 2);
		
		ClientType clientType = (ClientType) query.uniqueResult();
		
		return clientType;
	}
///////////////////////// END ADD CLIENT SECTION ///////////////////////////////////////

	

}